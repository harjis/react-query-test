{"version":3,"sources":["api/blogPost.ts","components/UpdateBlogPost/UpdateBlogPost.tsx","components/ShowBlogPost/ShowBlogPost.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["headers","getPost","a","fetch","method","response","json","updatePost","post","body","JSON","stringify","UpdateBlogPost","queryClient","useQueryClient","useState","name","setName","mutation","useMutation","onSuccess","invalidateQueries","isLoading","isSuccess","type","onChange","event","target","value","onClick","mutate","ShowBlogPost","useQuery","data","style","height","width","count","display","flexDirection","id","publishedAt","QueryClient","App","client","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wQAEMA,EAAuB,CAC3B,eAAgB,oBAGLC,EAAO,uCAAG,4BAAAC,EAAA,sEACEC,MAAM,QAAS,CACpCC,OAAQ,MACRJ,QAASA,IAHU,cACfK,EADe,gBAMRA,EAASC,OAND,mFAAH,qDASPC,EAAU,uCAAG,WAAOC,GAAP,eAAAN,EAAA,sEACDC,MAAM,QAAS,CACpCC,OAAQ,QACRJ,QAASA,EACTS,KAAMC,KAAKC,UAAUH,KAJC,cAClBH,EADkB,gBAOXA,EAASC,OAPE,mFAAH,sD,eCVVM,EAAiB,WAC5B,IAAMC,EAAcC,2BADc,EAEVC,mBAAS,IAFC,mBAE3BC,EAF2B,KAErBC,EAFqB,KAG5BC,EAAWC,sBAAY,aAAcZ,EAAY,CACrDa,UAAW,WACTP,EAAYQ,kBAAkB,WAIlC,OACE,gCACGH,EAASI,UAAY,mDAA8B,KACnDJ,EAASK,UAAY,gDAA2B,KAFnD,QAGQ,IACN,uBAAOC,KAAK,OAAOC,SAAU,SAACC,GAAD,OAAWT,EAAQS,EAAMC,OAAOC,UAC7D,wBACEC,QAAS,WACPX,EAASY,OAAO,CAAEd,UAFtB,wBCdOe,EAAe,WAAO,IAAD,EACJC,mBAAS,OAAQ/B,GAArCgC,EADwB,EACxBA,KAER,OAHgC,EAClBX,UAIV,sBAAKY,MAAO,CAAEC,OAAQ,IAAKC,MAAO,KAAlC,UACE,cAAC,IAAD,CAAUD,OAAO,SACjB,uBACA,cAAC,IAAD,CAAUE,MAAO,OAKrB,gCACE,oCAAKJ,QAAL,IAAKA,OAAL,EAAKA,EAAMjB,OACX,sBAAKkB,MAAO,CAAEI,QAAS,OAAQC,cAAe,UAA9C,UACE,8CAAUN,QAAV,IAAUA,OAAV,EAAUA,EAAMO,MAChB,wDAAoBP,QAApB,IAAoBA,OAApB,EAAoBA,EAAMQ,kBAE5B,uBACA,cAAC,EAAD,QCpBA5B,EAAc,IAAI6B,cAUTC,MARf,WACE,OACE,cAAC,sBAAD,CAAqBC,OAAQ/B,EAA7B,SACE,cAAC,EAAD,OCGSgC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d47324cc.chunk.js","sourcesContent":["import { Post } from \"../types\";\n\nconst headers: HeadersInit = {\n  \"Content-Type\": \"application/json\",\n};\n\nexport const getPost = async (): Promise<Post> => {\n  const response = await fetch(\"/post\", {\n    method: \"GET\",\n    headers: headers,\n  });\n\n  return await response.json();\n};\n\nexport const updatePost = async (post: Partial<Post>) => {\n  const response = await fetch(\"/post\", {\n    method: \"PATCH\",\n    headers: headers,\n    body: JSON.stringify(post),\n  });\n\n  return await response.json();\n};\n","import { useMutation, useQueryClient } from \"react-query\";\n\nimport { updatePost } from \"../../api/blogPost\";\nimport { useState } from \"react\";\n\nexport const UpdateBlogPost = () => {\n  const queryClient = useQueryClient();\n  const [name, setName] = useState(\"\");\n  const mutation = useMutation(\"updatePost\", updatePost, {\n    onSuccess: () => {\n      queryClient.invalidateQueries(\"post\");\n    },\n  });\n\n  return (\n    <div>\n      {mutation.isLoading ? <div>Updating name...</div> : null}\n      {mutation.isSuccess ? <div>Name Updated!</div> : null}\n      Name:{\" \"}\n      <input type=\"text\" onChange={(event) => setName(event.target.value)} />\n      <button\n        onClick={() => {\n          mutation.mutate({ name });\n        }}\n      >\n        Update\n      </button>\n    </div>\n  );\n};\n","import Skeleton from \"react-loading-skeleton\";\nimport { useQuery } from \"react-query\";\n\nimport { getPost } from \"../../api/blogPost\";\nimport { UpdateBlogPost } from \"../UpdateBlogPost\";\n\nexport const ShowBlogPost = () => {\n  const { data, isLoading } = useQuery(\"post\", getPost);\n\n  if (isLoading) {\n    return (\n      <div style={{ height: 500, width: 500 }}>\n        <Skeleton height=\"2rem\" />\n        <br />\n        <Skeleton count={2} />\n      </div>\n    );\n  }\n  return (\n    <div>\n      <h1>{data?.name}</h1>\n      <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n        <div>Id: {data?.id}</div>\n        <div>Published at: {data?.publishedAt}</div>\n      </div>\n      <hr />\n      <UpdateBlogPost />\n    </div>\n  );\n};\n","import React from \"react\";\n\nimport \"./App.css\";\nimport { ShowBlogPost } from \"./components/ShowBlogPost\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\n\nconst queryClient = new QueryClient();\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ShowBlogPost />\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport \"react-loading-skeleton/dist/skeleton.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}